name: Build and Release

on:
  push:
    branches: [ main ]
    tags: v*
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14

    - name: Check out code
      uses: actions/checkout@v2

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Build for Linux
      env:
        GOOS: linux
        GOARCH: amd64
      run: go build -o ${{ github.event.repository.name }} -v .

    - name: Build for Windows
      env:
        GOOS: windows
        GOARCH: amd64
      run: go build -o ${{ github.event.repository.name }}.exe -v .

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        if-no-files-found: error
        path: |
          ${{ github.event.repository.name }}
          ${{ github.event.repository.name }}.exe


  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')    
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Set variable
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

    - name: Check out static assets
      uses: actions/checkout@v2

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    - name: Create Linux package
      run: tar czf ${{ github.event.repository.name }}-${{ steps.vars.outputs.tag }}.tar.gz ${{ github.event.repository.name }} LICENSE

    - name: Create Windows package
      run: zip --junk-paths ${{ github.event.repository.name }}-${{ steps.vars.outputs.tag }}.zip ${{ github.event.repository.name }}.exe LICENSE

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Linux Release Asset
      id: upload-release-asset-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}-${{ steps.vars.outputs.tag }}.tar.gz
        asset_name: ${{ github.event.repository.name }}-linux-amd64-${{ steps.vars.outputs.tag }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows Release Asset
      id: upload-release-asset-windows 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}-${{ steps.vars.outputs.tag }}.zip
        asset_name: ${{ github.event.repository.name }}-windows-amd64-${{ steps.vars.outputs.tag }}.zip
        asset_content_type: application/zip
